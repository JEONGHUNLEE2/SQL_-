1주차

데이터유형  

  VARCHAR2 문자형 데이터 유형 지정
  NUMBER 숫자형 데이터 유형 지정(p : 전체자리수, s : 소수점 이하 자리수)
  DATE 날짜형 데이터 유형 지정
  
  PRIMARY KEY(유일한 값 + NOT NULL 이 결합된 형태)
  NOT NULL 데이터를 무조건 넣어야함을 의미(필수 기입 사항인 데이터 유형이다!)
      NULL 데이터가 없음을 의미 (데이터를 안넣어도 되는 유형이다!라는 뜻)
      
        ex) CREATE TABLE EMP (
              EMP_NO VARCHAR2(30) NOT NULL,
              EMP_NAME VARCHAR2(80) NOT NULL,
              SALARY NUMBER NULL,
              HIRE_DATE DATE NULL
              
------------------------------------------------------------------  

2주차 

 DDL (Data Definition Language, 데이터 정의어)
   CREATE : 객체를 생성
   DROP : 객체를 삭제
   ALTER : 객체를 수정
    - modify 컬럼 데이터형 수정
    - add 추가
    - rename column 컬럼명 변경
    - drop column 컬럼 삭제
   TRUNCATE TABLE : 테이블 데이터를 삭제
   
 DML (Data Manipulation Language, 데이터 조작어)
   SELECT : 테이블에 저장된 데이터를 조회 ( 90 % 사용)
   INSERT : 신규 데이터 입력/저장
   UPDATE : 기존 데이터를 수정
   DELETE : 데이터를 삭제
   

 SELECT 컬럼1, 컬럼2, 
   FROM 테이블명
   WHERE 조건(AND, OR)
    - WHERE 컬럼 BETWEEN 3000 AND 5000 (3000이상 5000미만)
    - WHERE 컬럼 IS NULL, IS NOT NULL
    - WHERE 컬럼 LIKE : '011%' or '%9' or '%124%' 포함된 문자 출력하기 
    - WHERE 컬럼 IN(데이터1, 데이터2) : 데이터1, 데이터2만 출력
   ORDER BY 정렬순서 
   
  
  CASE문
  
  case when 조건1 then 값1
       when 조건2 then 값2
       ....
       else 값 n

------------------------------------------------------------------  

3주차(SQL함수)
 숫자형
  ABS(n) : 절대값 반환
  MOD(n2, n1) : n2를 n1으로 나눈 나머지 반환 
  ROUND(n, i) : n의 소수점 기준 i+1번째에서 반올림해서 i번째 소수점까지 표시
  TRUNC(n1, n2) : n1의 소수점 기준 n2자리에서 자르기
 
 문자형
  LOWER(chr) : chr을 소문자로 변환
  UPPER(chr) : chr을 대문자로 변환
  SUBSTR(chr, n1, n2) : chr을 n1에서 시작해서 n2만큼 잘라낸 결과 출력 ***
  TRIM(chr) : chr의 양쪽 끝 공백을 제거한 결과를 반환
  LENGTH(chr) : chr문자의 글자 수를 반환
  REPLACE(chr, serch_str,rep_str) : Chr에서 serch_str을 찾아 rep_str로 대체
  INSTR(chr1, chr2, n1,n2) : chr1에서 chr2 문자를 찾아 그 시작 위치 반환
                              n1은 chr1에서 몇 번째 문자부터 찾을 것인지를 나타냄(생략 시 1적용)
                              n2는 위 조건에 맞는 chr2의 몇번째 위치를 반환할지를 나타냄.
                              
  날짜형
   SYSDATE : 현재 일자와 시간을 반환
   ADD_MONTHS(date, n) : date날짜에 n개월을 더한 날짜를 반환
   MONTHS_BETWEEN(date1, date2) : date1과 date2 두 날짜 사의의 개월 수를 반환
   LAST_DAY(date) : date가 속한 월의 마지막 일자를 반환
   ROUND(date, format) : date를 format기준으로 반올림한 날짜 반환(format생략 시 DD)
  
  
  형변환 함수
   TO_NUMBER(char) : char을 숫자로 변환 
   TO_CHAR(n, number_format) : 숫자 n을 number_format에 마게 문자로 변환)
   TO_CHAR(date, date_format) : 날짜인 date를 date_format에 맞게 문자로 변환
   TO_DATE(char, date_format) : char을 date_format에 맞게 날짜로 변환
   
   NVL(expr1, expr2) : expr1 값이 NULL이면 expr2를 반환
   NVL2(expr1, expr2, expr3) : expr1값이 NULL이면 expr3을 NULL이 아니면 expr2를 반환
   DECODE(expr, val1, result1, val2, result2,.....,default_value) : expr값이 value1이면 result1, value2면 result2

------------------------------------------------------------------  

4차(집계쿼리)
  집계쿼리 
   GROUP BY expr1, expr2 : 특정 항목(컬럼)별 최소, 최대, 평균 값 등을 산출
   
  집계함수
   COUNT(*): expr의 전체 개수 반환, 보통 * 사용
   MAX(expr) : 최댓값 반환
   MIN(expr) : 최솟값 반환
   SUM(expr) : 합계 반환
   AVG(expr) : 평균 반환
   
   HAVING : 집계함수가 들어갈 때 쓰는 조건함수, WHERE과 기능은 같지만 집계함수가 들어가면 WHERE은 사용 못함
   DISTINCT : 유일한 값, GROUP BY와 비슷하고 SELECT절에 두개 이상 컬럼 선택하고 DISTINCT 쓰면 두 컬럼을 조합해서 유일한 값을 출력시켜줌
   ROLLUP(COL1, COL2)... : COL1에 대한 소계, COL1과 COL2의 계, 그리고 전체 합계 계산
    ex) GROUP BY
        ROLLUP(substr(phone_number,1,3), JOB_ID)
        
        
  집합쿼리
   UNION : 중복값은 하나의 값으로 만들어주고 테이블을 합침, 컬럼의 수, 데이터 타입이 동일해야함
   ex)
     SELECT col1
        FROM Tbl_A
        UNION
        SELECT col1
        FROM Tbl_B
        ORDER BY 1;
        
   UNION ALL : UNION과 같지만 중복값도 모두 조회됨
   INTERSECT : 교집합 개념, 공통 데이터를 출력
   MINUS : 차집합 개념, 중복값을 제거 A-B하면 A기준으로 B에 있는 공통값을 제거해서 A데이터를 출력
  
   *기타 메모
     1. 인덱스가 걸려있는거는 가공하면 안좋아서 to_char안하고 between A and B 사용하는게 좋다.  
     2. 집계함수 사용했을 때 컬럼 기준은 첫 테이블 컬럼 기준!
  
 -----------------------------------------------------------------------------------------------

5주차 
 
 INNER JOIN 컬럼 ON 연결시킬 컬럼 = 연결시킬 컬럼 : 내부조인
 LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN : 외부조인
 
 분석함수 (select 절에)
 '분석 함수' OVER ( PARTITION BY col1, col2, …  ORDER BY col1, col2…)
   
 row_number() : 일련번호
 RANK() : 순위
 DENSE_RANK() : 누적순위
 LEAD(expr) : 후행 로우값
  - LEAD(salary, 1, 0) OVER : 1은 다음꺼라는 뜻, 2 입력하면 다다음, 0입력 위치는 null 이면 0으로 출력 해달라는 뜻
 LAG(expr, offset, default) : 선행 로우값

-------------------------------------------------------------------------------------------------------------

6주차
서브쿼리
 스칼라 서브쿼리 (Scalar Subquery)
    SELECT a.employee_id,
        a.first_name || ' ' || a.last_name emp_name,
        a.department_id,
        ( SELECT b.department_name
        FROM departments b
        WHERE a.department_id = b.department_id ) dept_name
        FROM employees a
        ORDER BY 1;

 인라인 뷰 (Inline View)---- 가장 많이 사용 / 여러가지 계산식 있을 때?
     SELECT a.department_id, a.employee_id,
                             a.last_name, a.salary,
                             k.department_id second_dept_id,
                             k.avg_salary
    FROM employees a,
      (SELECT b.department_id, AVG(b.salary) avg_salary
      FROM employees b
      GROUP BY b.department_id
      ) k
    WHERE a.department_id = k.department_id
    ORDER BY a.department_id;


중첩쿼리
-IN(서브쿼리에서 반환하는 값이 포함된 건만 조회)
  SELECT employee_id,
      first_name || ' ' || last_name emp_name,
      job_id,
      salary
      FROM employees
      WHERE (job_id, salary ) IN ( SELECT job_id, min_salary
                                    FROM jobs)
      ORDER BY 1;

                     
-EXIST(존재하는지를 체크)
  SELECT *
    FROM departments a
    WHERE EXISTS
            ( SELECT 1 #1은 아무의미 없음
            FROM employees b
            WHERE a.department_id = b.department_id
            ) ;

   SELECT department_id, employee_id, last_name, salary
    FROM employees a
    WHERE salary > (SELECT AVG(salary)
                    FROM employees b
                    WHERE a.department_id = b.department_id
                    group by b.department_id)
    ORDER BY department_id;
 
 
세미 조인 (Semi Join) : 두 번째 테이블에 있는 로우와 조건이 맞는 첫 번째 테이블의 로우 반환 **
 SELECT *                                                    SELECT *
    FROM departments                                            FROM departments a
    WHERE department_id IN                                      WHERE EXISTS
                          ( SELECT department_id                            ( SELECT 1
                          FROM employees                                      FROM employees b
                          ) ;                                                 WHERE a.department_id = b.department_id) ;


안티 조인 (Anti Join) : 세미 조인에서 NOT 연산자 사용하는 조인
   SELECT a.employee_id,
        a.first_name || ' ' || a.last_name
        FROM employees a
        WHERE a.employee_id
                          NOT IN ( SELECT employee_id
                          FROM job_history )
        ORDER BY 1;
   해석 :서브쿼리와의 조인조건에 부합하지 않는 건을 조회, job_history에 없는 사원 조회


 WITH 절 or CTE 
  - 아직 잘몰라서 정리 x
  
 Top n Query
  -  특정 컬럼 값을 기준으로 상위 n개, 혹은 하위 n개 로우를 조회하는 쿼리

 SELECT a.employee_id,
        a.first_name || ' ' || a.last_name emp_name,
        a.salary
    FROM employees a
    ORDER BY a.salary DESC
    FETCH FIRST 5 PERCENT ROWS ONLY; /(FETCH FIRST 5 ROWS ONLY도 가능) / (FETCH FIRST 5 PERCENT ROWS WITH TIES - 같은 값도 조회)

 
 로우를 컬럼으로 – PIVOT 절 사용
  SELECT *
    FROM ( SELECT years, gubun, subjects, score
    FROM score_table )
    PIVOT ( SUM(score)
    FOR subjects IN ( '국어', '영어', '수학', '과학', '지리', '독일어')
    
    
 컬럼을 로우로 – UNPIVOT절 사용
  SELECT *
    FROM score_col_table
    UNPIVOT ( score
    FOR subjects IN ( KOREAN AS '국어',
    ENGLISH AS '영어',
    MATH AS '수학',
    SCIENCE AS '과학',
    GEOLOGY AS '지리',
    GERMAN AS '독일어')
    ); 

    
